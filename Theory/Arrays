using System;

internal class Arrays
{
    static void Main(string[] args)
    {
        //Arrays allow to store multiple data of the same data type (primitives or references or even arrays
        /*types of arrays
         * single-dimensional 
         * multidimensional
         * jagged.*/
        //Arrays are 0 indexed, which means first item is places at 0 index and last at length - 1
        //Length and numbers of dimension are stated when array is initialized and can't be changed later
        //The default values of numeric array elements are set to zero, and reference elements are set to null
        //Array is an object of base type System.Array.

        //You create a single-dimensional array using the new operator specifying the array element type and the number of elements
        int[] SingleIntArray = new int[3]; // 3 int elements in array 
        string[] SingleStringArray = new string[6]; //Storing 6 string values 

        /*You can initialize the elements of an array when you declare the array.
        The length specifier isn't needed because it's inferred by the number of elements in the initialization list. */
        int[] SingleIntArray2 = { 4, 5, 6 }; //int array with 3 elements which are 4, 5, 6

        //You can declare an array variable without creating it, but you must use the new operator when you assign a new array to this variable
        int[] SingleIntArray3;
        SingleIntArray3 = new int[] { 2, 4, 6 };

        //Accessing to index out of array length give exception index out of bounds 
        //Setting values into array index 
        SingleIntArray[0] = 1; //setting 1 at 0 index 
        SingleIntArray[1] = 4; //setting 4 at 1 index 
        SingleIntArray[2] = 8; //setting 8 at 2 index 

        //Retrieving  value from array 
        Console.WriteLine("At index {0} is placed item {1}", 0, SingleIntArray[0]);
        Console.WriteLine("At index {0} is placed item {1}", 1, SingleIntArray[1]);
        Console.WriteLine("At index {0} is placed item {1}", 2, SingleIntArray[2]);


        Console.WriteLine("SingleIntArray length is {0}", SingleIntArray.Length); //property of array class which is  number of elements in array
        Console.WriteLine("SingleIntArray number of dimension is {0}", SingleIntArray.Rank); //number of dimensions in array 
        
        //looping through array using foreach 
        foreach(int i in SingleIntArray)
        {
            Console.Write(i + ", "); //1, 4, 8,
        }
        Console.WriteLine();
        //looping through array using for loop
        for(int i = 0; i < SingleIntArray.Length; i++)
        {
            Console.Write("index {0} = {1}, ", i, SingleIntArray[i]); //index 0 = 1, index 1 = 4, index 2 = 8,
        }
        Console.WriteLine();

        //Multidimensional array
        int[,] MultiIntArray = new int[4, 2]; //two-dimensional array of four rows and two columns.
        int [,,] MultiIntArray2 = new int[3, 3, 3]; // three dimensions 3, 3, 3

        //initialization of multidimensional array
        int[,] MultiIntArray3 = new int[3,2] { 
            { 1, 1 }, 
            { 2, 2 }, 
            { 3, 3 } 
        };
        int[,] MultiIntArray4 = new int[2, 3] { 
            { 1, 1, 1 }, 
            { 2, 2, 2 } 
        };
        int[,,] MultiIntArray5 = new int[2, 2, 2] { 
            { 
                { 1, 1 }, 
                { 2, 2 } 
            }, 
            { 
                { 3, 3 }, 
                { 4, 4 } 
            } 
        };

        // Accessing multidimensional 
        Console.WriteLine("MultiIntArray3 at index [0][1] is item {0}", MultiIntArray3[0, 1]);
        Console.WriteLine("MultiIntArray3 at index [1][1] is item {0}", MultiIntArray3[1, 1]);
        Console.WriteLine("MultiIntArray3 at index [2][0] is item {0}", MultiIntArray3[2, 0]);

        Console.WriteLine("MultiIntArray5 at index [1][1][1] is item {0}", MultiIntArray5[1, 1, 1]);
        Console.WriteLine("MultiIntArray5 at index [0][1][0] is item {0}", MultiIntArray5[0, 1, 0]);
        Console.WriteLine("MultiIntArray5 at index [0][0][0] is item {0}", MultiIntArray5[0, 0, 0]);


        //looping through multidimensional array
        for(int i = 0; i < MultiIntArray3.GetLength(0); i++)
        {
            Console.Write("MultiIntArray3 ");
            for(int j = 0; j < MultiIntArray3.GetLength(1); j++)
            {
                Console.Write("[{0},{1}]: ", i, j);
                Console.Write(MultiIntArray3[i, j]);

            }
            Console.WriteLine();
        }

        //jagged array is "array of arrays.", whose elements are arrays,
        int[][] jaggedIntArray = new int[3][]; // declaration of jagged array with number of arrays within it 
        jaggedIntArray[0] = new int[2]; //declaration size of each nested array
        jaggedIntArray[1] = new int[3];
        jaggedIntArray[2] = new int[4];
        //each contained array can store different number of items 

        //initialization and filling array
        int[][] jaggedIntArray2 = new int[2][];
        jaggedIntArray2[0] = new int[] { 5, 10 }; 
        jaggedIntArray2[1] = new int[] { 2, 4 };

        //another way of initialization of array
        int[][] jaggedIntArray3 = 
        {
            new int[3] {1,3,5},
            new int[3] {2, 4, 6}
        };

        //Accessing to each value 
        for (int i = 0; i < jaggedIntArray3.Length; i++)
        {
            Console.Write("JaggedIntArray ");
            for (int j = 0; j < jaggedIntArray3[i].Length; j++)
            {

                Console.Write("[{0}][{1}] = ", i, j);
                Console.Write(jaggedIntArray3[i][j] + " ");
            }
            Console.WriteLine();
        }


        Console.ReadKey();

    }
}
