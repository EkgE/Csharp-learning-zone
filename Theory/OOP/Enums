using System;
 class Enums
{
   
    static void Main(string[] args)
    {
        //enum is a special "class" that represents a group of constants (unchangeable/read-only variables).
        //Enum is short for "enumerations", which means "specifically listed".

        Month x = Month.May; //creating instance of enum 
        Console.WriteLine("Month enum type using month.ToString() equals: {0}", x.ToString()); 
        Console.WriteLine("Month enum type converting to int equals: {0}", (int)x);

        //using enums with switch
        Days y = new Days();
        y = Days.Monday;
        switch (y)
        {
            case Days.Monday:
            case Days.Tuesday:
            case Days.Wednesday:
            case Days.Thursday:
            case Days.Friday:
                Console.WriteLine("Today is not a weekend");
                break;
            case Days.Saturday:
            case Days.Sunday:
                Console.WriteLine("Today is weekend");
                break;

        }
        // An explicit cast is required to convert from enum type to an integral type.
        Console.WriteLine("The value of y in days is {0}, but it's integral type is {1}", y, (int)y);



        Console.ReadKey();
    }
    enum inClass //eum inside a class 
    {
        first,
        second,
        third,
    }
}
 enum Month //enum outside a class
{
    January,    // 0
    February,   // 1
    March,      // 2
    April,      // 3
    May,        // 4
    June,       // 5
    July,       // 6
    October = 10,   // 10
    November // 11 (after assigning specific value to a member of enum, next item will be +1 of this value
    // enums are 0 indexed, so first item is equal int 0, second 1 etc 
    //but indexes can be overwritten with specified values 
}
enum Days : byte
    //default base data type is int
    //we can change specific value that enums base on   
{
    Monday, 
    Tuesday, 
    Wednesday, 
    Thursday, 
    Friday, 
    Saturday,
    Sunday
}
